# After changing this file, check it on:
#   http://lint.travis-ci.org/

os:         linux
dist:       xenial
sudo:       false
language:   python

python:
    - 3.5
    - 3.6

addons:
    apt:
        packages:
            - g++-7
            - python-pip
        sources:
            - ubuntu-toolchain-r-test

env:
    matrix:
        - TRAVIS_CK_CXX_COMPILER=gcc ARMNN_SUPPORTED_FRONTENDS=tf,tflite,onnx

matrix:
    include:
        - os: osx
          osx_image: xcode10.2
          language: generic
          python:   2.7
          env:      WANTED_PYTHON_VERSION=2.7 TRAVIS_CK_CXX_COMPILER=llvm ARMNN_SUPPORTED_FRONTENDS=tf,onnx
        - os: osx
          osx_image: xcode10.2
          language: generic
          python:   3.6
          env:      WANTED_PYTHON_VERSION=3.6 TRAVIS_CK_CXX_COMPILER=llvm ARMNN_SUPPORTED_FRONTENDS=tf,onnx

before_install:
    - |
        if [ $TRAVIS_OS_NAME == "osx" ]; then
            brew update                                                         # this swaps python versions and makes 3 the default one

            if [ "$WANTED_PYTHON_VERSION" == "2.7" ]; then
                brew reinstall python\@2 || brew link --overwrite python\@2     # install and link python2 and pip2 to /usr/local/bin
                export PATH=/usr/local/opt/python\@2/bin:$PATH
                export PYTHON_EXE=python
            else
                brew unlink python
                brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb --ignore-dependencies
                brew switch python 3.6.5_1
                export PATH=/usr/local/opt/python/bin:$PATH
                export PYTHON_EXE=python3
            fi

            export CK_PLATFORM_NAME="generic-macos "                            # used later by CK
        else
            export WANTED_PYTHON_VERSION=$TRAVIS_PYTHON_VERSION                 # since Python is supported in Linux, get it from Travis
            export PYTHON_EXE=python
            export CK_PLATFORM_NAME="generic-linux "                            # used later by CK (note the trailing space to make the choice unique)
        fi

install:
    - CWD=`pwd`
    - THIS_REPO_NAME=`basename $CWD`
    - echo "TRAVIS_OS_NAME=${TRAVIS_OS_NAME}, WANTED_PYTHON_VERSION=${WANTED_PYTHON_VERSION}"
    - echo "CWD=${CWD}, THIS_REPO_NAME=${THIS_REPO_NAME}, PATH=${PATH}"
    - which "${PYTHON_EXE}"
    - ${PYTHON_EXE} --version
    - rm -f `which pip`                                                             # the file is removable, but not writeable
    - ${PYTHON_EXE} -m pip install --ignore-installed --verbose pip setuptools      # make sure pip is also up to date no matter what
    - ${PYTHON_EXE} -m pip install -r requirements.txt                              # ck kernel itself and some essential components
    - ck pull repo:${THIS_REPO_NAME}                                                # ...also trigger pulling dependent repositories
    - echo "$CK_PLATFORM_NAME" | ck detect platform.os --update_platform_init       # set the platform to generic-linux (1) or generic-macos (2)
    - ck detect soft:compiler.python --full_path=`which ${PYTHON_EXE}`              # pick the one Travis has set for us in the PATH
    - echo | ck detect soft:tool.cmake --first_match                                # avoid manual selection
    - echo | ck detect soft:compiler.${TRAVIS_CK_CXX_COMPILER} --first_match        # avoid manual selection
    - ck install package --tags=lib,boost,v1.64.0,for-armnn > boost_install.log     # the log is too long for Travis to survive
    - ck install package:lib-protobuf-3.5.1-host                                    # avoid manual selection
    - ck install package --tags=lib,armnn,rel.19.08,${ARMNN_SUPPORTED_FRONTENDS}

script:
    - ck show env                                                                   # show everything that has been detected or installed
    - ck compile program:simplesample
    - echo 14 | ck run program:simplesample                                         # this program doesn't use any frontends
    - ck compile program:mnist-armnn-tf
    - ck run program:mnist-armnn-tf                                                 # this program uses the TF frontend

after_failure:
    - tail -n 500 boost_install.log

